Q1. Difference between " == " and “ === “ operators.
Answer == (Equality Operator): Compares only the values of two variables, ignoring their data types.

=== (Strict Equality Operator): Compares both the value and the data type of two variables.

Q2. What are the differences between var, let and const ? 
Answer var :
       1. variable declare by var keyword can be re-assigned or re-declare.
       2. variable declare by var keyword have functional scope.

       let :
       1. variable declare by let keyword can be re-assigned but not re-declare.
       2. variable declare by let keyword have block scope.

       const :
       1. variable declare by const keyword cannot be re-assigned or re-declare.
       2. variable declare by const keyword have block scope.
       3. must be initialized at declaration time.

Q3. What is Execution Context in JavaScript?
Answer An execution context is an environment where JavaScript code is evaluated and executed. It determines what variables, functions, and objects are accessible at a particular point in the code.

JavaScript has 2 main types of execution contexts:
  1. Global Execution Context (GEC)
   - Created when the JS file first runs.
   - Only one global context exists.
   - Creates a global object (window in browsers) and sets this to the global object.

   2. Functional Execution Context (FEC)
    - Created whenever a function is invoked.
    - Each function gets its own execution context, with its own variables and parameters.

Two Phases of Execution Context:
   1. memory Creation Phase
    - JS engine scans the code and allocates memory for:
    - Variables (undefined for var)
    - Function declarations
    - this keyword

   2. Execution Phase
    - Code is executed line by line, and actual values are assigned to variables.

Q4. What is creation phase and execution phase ?
Answer 1. memory Creation Phase
        - JS engine scans the code and allocates memory for:
        - Variables (undefined for var)
        - Function declarations
        - this keyword

       2. Execution Phase
        - Code is executed line by line, and actual values are assigned to variables.

Q5. What is Hoisting in JavaScript?
Answer Hoisting is a JavaScript mechanism where variable and function declarations are moved to the top of their containing scope (global or function) during the creation phase of the execution context.
This allows you to use variables and functions before they are actually declared in the code.

Q6. Difference between undefined vs not defined vs NaN ?
Answer undefined :
       - A special value automatically assigned to variables that are declared but not initialized.
       - It means “variable exists but no value is assigned yet.”
      
      not defined :
      - Refers to a variable that has never been declared in the current scope.
      - It means “variable does not exist at all”.

      NaN (Not-a-Number) :
      - A special numeric value representing an invalid number.
      - It means “result of a failed or undefined mathematical operation”.

Q7. How many operators do we have in JS ? 
Answer There are 6 type of operator in JavaScript.
       1. Arihthmetic operator : (+, -, *, /, %)
       2. Relational operator : (>, >=, <, <=, ==, !=, ===, !==)
       3. Assignment operator : ( = ) 
       4. Logical operator : (&&, ||, !)
       5. Ternary operator : (condtiona ? statment1 : statment2)
       6. Bitwise operator : (&, |, ~, >>, <<, ^)
       7. Unary operator : (++,--)


Q8. Explain Local Scope, Block Scope, Functional Scope and Scope Chain in javascript.
Answer 1. Local Scope
       - A variable has local scope when it is declared inside a function or block, meaning it can only be accessed within that specific function or block.
       - Outside that block/function, the variable is not accessible.
       Eg : function greet() {
              let message = "Hello, Diwaker"; // local scope
              console.log(message); //  Accessible
            }
            greet();
            console.log(message); //  Error: message is not defined

       2. Block Scope 
       - A block is defined by { } (curly braces), like inside if, for, or while.
       - Variables declared with let or const have block scope, meaning they exist only inside that { }.
       - Variables declared with var do not follow block scope, they are function-scoped instead.
       Eg : if (true) {
              let a = 10;   // block-scoped
              const b = 20; // block-scoped
              var c = 30;   // function-scoped
            }

            console.log(c); //  30 (var ignores block scope)
            console.log(a); //  Error: a is not defined
            console.log(b); //  Error: b is not defined

       3. Functional Scope
       - Variables declared with var are function-scoped.
       - That means they are accessible anywhere inside the function, regardless of blocks { }.
       Eg : function test() {
              if (true) {
                var x = 100; // function-scoped
              }
              console.log(x); //  Accessible here too
            }
            test();
        
       4. Scope Chain
       - Scope chain means: when you try to access a variable, JavaScript looks for it in the current scope first.
       - If it’s not found, it moves outward (to parent scopes) until it reaches the global scope.
       - If not found even in the global scope → ReferenceError.
       Eg :let globalVar = "I am global";

          function outer() {
            let outerVar = "I am outer";

            function inner() {
              let innerVar = "I am inner";

              console.log(innerVar);  //  Found in inner scope
              console.log(outerVar);  //  Found in outer scope
              console.log(globalVar); //  Found in global scope
            }
            inner();
          }
          outer();

